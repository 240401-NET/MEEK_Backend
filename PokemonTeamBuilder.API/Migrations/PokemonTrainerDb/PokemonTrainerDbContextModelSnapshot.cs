// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonTeamBuilder.API.DB;

#nullable disable

namespace PokemonTeamBuilder.API.Migrations.PokemonTrainerDb
{
    [DbContext(typeof(PokemonTrainerDbContext))]
    partial class PokemonTrainerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PokemonAbilityPokemonPokeApi", b =>
                {
                    b.Property<int>("AbilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PkmApisId")
                        .HasColumnType("int");

                    b.HasKey("AbilitiesId", "PkmApisId");

                    b.HasIndex("PkmApisId");

                    b.ToTable("PokemonAbilityPokemonPokeApi");
                });

            modelBuilder.Entity("PokemonMovePokemonPokeApi", b =>
                {
                    b.Property<int>("MovesId")
                        .HasColumnType("int");

                    b.Property<int>("PkmApisId")
                        .HasColumnType("int");

                    b.HasKey("MovesId", "PkmApisId");

                    b.HasIndex("PkmApisId");

                    b.ToTable("PokemonMovePokemonPokeApi");
                });

            modelBuilder.Entity("PokemonPokeApiPokemonType", b =>
                {
                    b.Property<int>("PkmApisId")
                        .HasColumnType("int");

                    b.Property<int>("TypesId")
                        .HasColumnType("int");

                    b.HasKey("PkmApisId", "TypesId");

                    b.HasIndex("TypesId");

                    b.ToTable("PokemonPokeApiPokemonType");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.ItemPokeApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sprite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemPokeApis");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PokemonAbilities");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonBaseStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseStat")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PkmApiId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PkmApiId");

                    b.ToTable("PokemonBaseStats");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PokemonMoves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonMoveSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Move1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Move2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Move3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Move4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PkmTmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PkmTmId")
                        .IsUnique();

                    b.ToTable("PokemonMoveSets");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonPokeApi", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PokemonPokeApis");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonSprite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "front_default");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "front_female");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "front_shiny");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "front_shiny_female");

                    b.Property<int>("PkmApiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PkmApiId")
                        .IsUnique();

                    b.ToTable("PokemonSprites");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Effort")
                        .HasColumnType("int");

                    b.Property<int>("Individual")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PkmTmId")
                        .HasColumnType("int");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PkmTmId");

                    b.ToTable("PokemonStats");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("PokemonTeams");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChosenAbility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HeldItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShiny")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemPokeApiId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PkmApiId")
                        .HasColumnType("int");

                    b.Property<int?>("PokemonAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonTeamId")
                        .HasColumnType("int");

                    b.Property<int>("RosterOrder")
                        .HasColumnType("int");

                    b.Property<string>("TeraType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemPokeApiId");

                    b.HasIndex("PkmApiId");

                    b.HasIndex("PokemonAbilityId");

                    b.HasIndex("PokemonTeamId");

                    b.ToTable("PokemonTeamMembers");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TestTrainer"
                        },
                        new
                        {
                            Id = 42,
                            Name = "TestTrainer42"
                        });
                });

            modelBuilder.Entity("PokemonAbilityPokemonPokeApi", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonAbility", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonPokeApi", null)
                        .WithMany()
                        .HasForeignKey("PkmApisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonMovePokemonPokeApi", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonMove", null)
                        .WithMany()
                        .HasForeignKey("MovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonPokeApi", null)
                        .WithMany()
                        .HasForeignKey("PkmApisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonPokeApiPokemonType", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonPokeApi", null)
                        .WithMany()
                        .HasForeignKey("PkmApisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonType", null)
                        .WithMany()
                        .HasForeignKey("TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonBaseStat", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonPokeApi", "PkmApi")
                        .WithMany("PokemonBaseStats")
                        .HasForeignKey("PkmApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PkmApi");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonMoveSet", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonTeamMember", "PkmTm")
                        .WithOne("PokemonMoveSet")
                        .HasForeignKey("PokemonTeamBuilder.API.Model.PokemonMoveSet", "PkmTmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PkmTm");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonSprite", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonPokeApi", "PkmApi")
                        .WithOne("PokemonSprite")
                        .HasForeignKey("PokemonTeamBuilder.API.Model.PokemonSprite", "PkmApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PkmApi");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonStat", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonTeamMember", "PkmTm")
                        .WithMany("PokemonStats")
                        .HasForeignKey("PkmTmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PkmTm");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonTeam", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.Trainer", "Trainer")
                        .WithMany("PokemonTeams")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonTeamMember", b =>
                {
                    b.HasOne("PokemonTeamBuilder.API.Model.ItemPokeApi", null)
                        .WithMany("PokemonTeamMembers")
                        .HasForeignKey("ItemPokeApiId");

                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonPokeApi", "PkmApi")
                        .WithMany("PokemonTeamMembers")
                        .HasForeignKey("PkmApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonAbility", null)
                        .WithMany("PokemonTeamMembers")
                        .HasForeignKey("PokemonAbilityId");

                    b.HasOne("PokemonTeamBuilder.API.Model.PokemonTeam", "PokemonTeam")
                        .WithMany("PokemonTeamMembers")
                        .HasForeignKey("PokemonTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PkmApi");

                    b.Navigation("PokemonTeam");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.ItemPokeApi", b =>
                {
                    b.Navigation("PokemonTeamMembers");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonAbility", b =>
                {
                    b.Navigation("PokemonTeamMembers");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonPokeApi", b =>
                {
                    b.Navigation("PokemonBaseStats");

                    b.Navigation("PokemonSprite");

                    b.Navigation("PokemonTeamMembers");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonTeam", b =>
                {
                    b.Navigation("PokemonTeamMembers");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.PokemonTeamMember", b =>
                {
                    b.Navigation("PokemonMoveSet");

                    b.Navigation("PokemonStats");
                });

            modelBuilder.Entity("PokemonTeamBuilder.API.Model.Trainer", b =>
                {
                    b.Navigation("PokemonTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
